<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<# #>
<# // add namespaces (check assembly name tag for adding new namespace.!!) #>
<#@ assembly name = "System.Xml.dll" #>
<#@ assembly name = "System.Xml.Linq.dll" #>
<#@ import namespace = "System.Xml" #>
<#@ import namespace = "System.Xml.Schema" #>
<#@ import namespace = "System.Xml.Linq" #>
<#@ import namespace = "System.IO" #>
<#@ import namespace = "System.Diagnostics" #>
<# #>
<#@ output extension=".xsd" encoding="utf-8" #>
<# #>
<# // gen .xsd file using defined .xml #>
<# #>
<# // include files #>
<#@include file="T4CommonDefine.t4" #>
<# #>
<#
// 변수가 할당되고 사용되지 않을 경우 발생하는 compiler warning 0219를 disable 처리..
#pragma warning disable 0219

	// commandline options
	string strXmlPath = @"C:\Work\DevSupport\549n_SGDS\Enum\";
	string strTypeName = "SampleEnumType";
	string strXmlFile = strXmlPath + @".\" + strTypeName + ".xml";
	string strXsdFile = strXmlPath + @"..\\Schema\\EnumDefine.xsd";

	bool bUseUE4NamingRule = false;

	// set predefined value
	string strEnumBody = "";
	string strEnumPrefix = "";

	string strTargetNSPrefix = "http://leigient.549n.com/schema/";

	char[] strUE4EnumSep = {'_'};

	XElement xmlData = null;
	XNamespace XmlNS = null;
	XAttribute xmlAttr = null;

	int nIDRangeMin = 0;
	int nIDRangeMax = 0;
	int nCurrentID	= 0;

#region [set commandline options]

	// replication commandline option
	PropertyInfo parametersProperty =
		Host
			.GetType()
			.GetProperty("Parameters",
				BindingFlags.NonPublic | BindingFlags.Instance);

	if(parametersProperty != null)
	{
		StringCollection Parameters =
			(StringCollection)parametersProperty
				.GetValue(Host, null);

		if (Parameters != null)
		{
			foreach (string Parameter in Parameters)
			{
				string[] strParams = Parameter.Split('!');
				if (strParams[0] == "option")
				{
					foreach(string strAmpOption in strParams)
					{
						string[] strOptions = strAmpOption.Split('=');

						if (strOptions[0] == "input")
						{
							strXmlFile = strOptions[1];
						}
						else if (strOptions[0] == "xsd")
						{
							strXsdFile = strOptions[1];
						}
					}
				}
				else { continue; }
			}
		}
	}

#endregion [set commandline options]

	// read xml file
	xmlData = XElement.Load(@strXmlFile);

// leigient - 아래 region 구문은 단지 xml schema 유효성 체크를 위한 구문..
// 솔직히 유효성 체크만을 위하여 XDocument를 선언하는 건 낭비이긴한디.. 아직 다른 방법이 없다..ㅜ.ㅠ
#region [check xml schema]

	XmlSchemaSet EnumDefine = new XmlSchemaSet();
	XDocument XmlDoc = XDocument.Load(@strXmlFile);

	XmlNS = xmlData.Name.Namespace;
	EnumDefine.Add(XmlNS.ToString(), strXsdFile);

	XmlDoc.Validate(EnumDefine, (o, e) => { PrintErrorNExit(e.Message); } );

#endregion [check xml schema]

	//string strGenTime = "	generation time : " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

	strEnumBody += "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + _CRLF;;
	strEnumBody += "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"" + _CRLF;
	strEnumBody += _TAB + "targetNamespace=\"" + strTargetNSPrefix + strTypeName + "\"" + _CRLF;
	strEnumBody += _TAB + "elementFormDefault =\"qualified\"" + _CRLF;
	strEnumBody += _TAB + "attributeFormDefault =\"qualified\"" + _CRLF;
	strEnumBody += _TAB + "xmlns=\"" + strTargetNSPrefix + strTypeName + "\"" + _CRLF;
	strEnumBody += _TAB + "version=\"1.0\" >" + _CRLF + _CRLF;

	strEnumBody += "<!--" + _CRLF;
	strEnumBody += _TAB + "type defines for Project 549n" + _CRLF;
	//strEnumBody += _TAB + strGenTime + _CRLF;
	strEnumBody += "-->" + _CRLF;

	strEnumBody += _TAB + "<xs:annotation>" + _CRLF;
	strEnumBody += _TAB + "</xs:annotation>" + _CRLF + _CRLF;

	Write(strEnumBody);

	var enumCategoryList = from data in xmlData.Elements()
							where data.Name.LocalName == "EnumCategory"
							select data;

	foreach (var enumCategory in enumCategoryList.ToList())
	{
		//preprocessing
		strEnumPrefix = "";
		strEnumBody = "" + _CRLF;

		nCurrentID = 0;

		xmlAttr = enumCategory.Attribute(XmlNS + "Comment");
		if (xmlAttr != null) { strEnumBody += _TAB + _XMLCMTBGN + xmlAttr.Value + _XMLCMTEND + _CRLF; xmlAttr = null; }

		xmlAttr = enumCategory.Attribute(XmlNS + "UseUE4NamingRule");

		xmlAttr = enumCategory.Attribute(XmlNS + "EnumName");
		if (xmlAttr != null)
		{
			strEnumPrefix = xmlAttr.Value + "_";
			strEnumBody += _TAB + "<xs:simpleType name=\"" + xmlAttr.Value +"\">" + _CRLF;
			strEnumBody += _TAB + _TAB + "<xs:restriction base=\"xs:string\">" + _CRLF;
			xmlAttr = null;
		}
		else { Trace.Assert(false, "[ERROR] no EnumName in EnumCategory!"); }

		xmlAttr = enumCategory.Attribute(XmlNS + "IDRangeMin");
		if (xmlAttr != null)
		{
			nIDRangeMin = Convert.ToInt32(xmlAttr.Value);
			nCurrentID = nIDRangeMin;
		}
		else { Trace.Assert(false, "[ERROR] no range min value in EnumCategory!"); }

		xmlAttr = enumCategory.Attribute(XmlNS + "IDRangeMax");
		if (xmlAttr != null)
		{
			nIDRangeMax = Convert.ToInt32(xmlAttr.Value);
		}

		// declare _None
		strEnumBody += _TAB + _TAB + _TAB + "<xs:enumeration id=\"" + strEnumPrefix +  String.Format("{0:d16}", nCurrentID) + "\" value=\"" + strEnumPrefix + "NONE\" />" + _CRLF;

		foreach (XElement xmlSubElement in enumCategory.Elements())
		{
			if (xmlSubElement.Name.LocalName == "EnumData")
			{
				XAttribute xmlSubAttr = null;

				if (bUseUE4NamingRule == true)
				{
					xmlSubAttr = xmlSubElement.Attribute(XmlNS + "ID");
					if (xmlSubAttr != null) 
					{
						strEnumPrefix = xmlSubAttr.Value.Split('_')[0] + "_";
					}
				}

				xmlSubAttr = xmlSubElement.Attribute(XmlNS + "Value");
				if (xmlSubAttr != null) 
				{
					if (xmlSubAttr.Value.StartsWith("0x")) { nCurrentID = Convert.ToInt32(xmlSubAttr.Value,16); }
					else { nCurrentID = Convert.ToInt32(xmlSubAttr.Value); }

					xmlSubAttr = null;
				}
				else { nCurrentID++; }

				xmlSubAttr = xmlSubElement.Attribute(XmlNS + "ID");
				if (xmlSubAttr != null)
				{
					strEnumBody += _TAB + _TAB + _TAB + "<xs:enumeration id=\"" + strEnumPrefix + String.Format("{0:d16}",nCurrentID) + "\" value=\"";
					if (bUseUE4NamingRule)
					{
						//strEnumBody += xmlSubAttr.Value.Split(strUE4EnumSep, nUE4EnumSepSize)[nUE4EnumSepIndex] + "\" />";
						strEnumBody += xmlSubAttr.Value + "\" />";
					}
					else
					{
						strEnumBody += strEnumPrefix + xmlSubAttr.Value + "\" />";
					}
					xmlSubAttr = null;
				}

				xmlSubAttr = xmlSubElement.Attribute(XmlNS + "Comment");
				if (xmlSubAttr != null)
				{
					strEnumBody += _XMLTCT + xmlSubAttr.Value + _XMLCMTEND;
					xmlSubAttr = null;
				}

				strEnumBody += _CRLF;
			}
		}

		if (bUseUE4NamingRule == false)
		{
			nCurrentID++;
			strEnumBody += _TAB + _TAB + _TAB + "<xs:enumeration id=\"" + strEnumPrefix + String.Format("{0:d16}",nCurrentID) + "\" value=\"" + strEnumPrefix +"MAX\" />" + _CRLF;
		}
		strEnumBody += _TAB + _TAB + "</xs:restriction>" + _CRLF;
		strEnumBody += _TAB + "</xs:simpleType>" + _CRLF;

		Write(strEnumBody);
	}

	strEnumBody = _CRLF + "</xs:schema>";
	Write(strEnumBody);

#>
