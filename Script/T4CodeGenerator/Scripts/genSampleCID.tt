<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<# #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<# #>
<# // add namespaces (check assembly name tag for adding new namespace.!!) #>
<#@ assembly name = "System.Xml.dll" #>
<#@ assembly name = "System.Xml.Linq.dll" #>
<#@ import namespace = "System.Xml" #>
<#@ import namespace = "System.Xml.Schema" #>
<#@ import namespace = "System.Xml.Linq" #>
<#@ import namespace = "System.IO" #>
<#@ import namespace = "System.Diagnostics" #>
<# #>
<#@ output extension=".xsd" encoding="utf-8" #>
<# #>
<# // T4 Script for impl 549n enum emulator #>
<# // gen CID .xsd file using defined .xml #>
<# #>
<# // include files #>
<#@include file="T4SharedModule.t4" #>
<# #>
<#
// 변수가 할당되고 사용되지 않을 경우 발생하는 compiler warning 0219를 disable 처리..
#pragma warning disable 0219

	// commandline options
	string strXmlPath = @"C:\Work\DevSupport\549n_SGDS\SGD_XML\Base\";
	string strCIDName = "SampleCID";
	string strXmlFile = strXmlPath + @".\" + strCIDName + ".xml";
	string strXsdFile = strXmlPath + @"..\..\Schema\CIDXmlType.xsd";

	// set predefined value
	string strEnumBody = "";

	string strTargetNSPrefix = "http://leigient.549n.com/schema/";

	XElement xmlData = null;
	XNamespace XmlNS = null;
	XAttribute xmlAttr = null;

#region [set commandline options]

	// replication commandline option
	PropertyInfo parametersProperty =
		Host
			.GetType()
			.GetProperty("Parameters",
				BindingFlags.NonPublic | BindingFlags.Instance);

	if(parametersProperty != null)
	{
		StringCollection Parameters =
			(StringCollection)parametersProperty
				.GetValue(Host, null);

		if (Parameters != null)
		{
			foreach (string Parameter in Parameters)
			{
				string[] strParams = Parameter.Split('!');
				if (strParams[0] == "t4option")
				{
					foreach(string strParam in strParams)
					{
						string[] strOptions = strParam.Split('=');

						if (strOptions[0] == "input")
						{
							strXmlFile = strOptions[1];
						}
						else if (strOptions[0] == "xsd")
						{
							strXsdFile = strOptions[1];
						}
						else if (strOptions[0] == "cidname")
						{
							strCIDName = strOptions[1];
						}
					}
				}
				else { continue; }
			}
		}
	}

#endregion [set commandline options]

	// read xml file
	xmlData = XElement.Load(@strXmlFile);

// leigient - 아래 region 구문은 단지 xml schema 유효성 체크를 위한 구문..
// 솔직히 유효성 체크만을 위하여 XDocument를 선언하는 건 낭비이긴한디.. 아직 다른 방법이 없다..ㅜ.ㅠ
#region [check xml schema]

	XmlSchemaSet EnumDefine = new XmlSchemaSet();
	XDocument XmlDoc = XDocument.Load(@strXmlFile);

	XmlNS = xmlData.Name.Namespace;
	EnumDefine.Add(XmlNS.ToString(), strXsdFile);

	XmlDoc.Validate(EnumDefine, (o, e) => { PrintErrorNExit(e.Message); } );

#endregion [check xml schema]

	string strGenTime = "	generation time : " + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

	strEnumBody += "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + _CRLF;;
	strEnumBody += "<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"" + _CRLF;
	strEnumBody += _TAB + "targetNamespace=\"" + strTargetNSPrefix + strCIDName + "\"" + _CRLF;
	strEnumBody += _TAB + "elementFormDefault =\"qualified\"" + _CRLF;
	strEnumBody += _TAB + "attributeFormDefault =\"qualified\"" + _CRLF;
	strEnumBody += _TAB + "xmlns=\"" + strTargetNSPrefix + strCIDName + "\"" + _CRLF;
	strEnumBody += _TAB + "version=\"1.0\" >" + _CRLF + _CRLF;

	strEnumBody += _XMLCMTBGN + _CRLF;
	strEnumBody += _TAB + "CID defines for Project 549n" + _CRLF;
//	strEnumBody += _TAB + strGenTime + _CRLF;	// GenTime 제외..
	strEnumBody += _XMLCMTEND + _CRLF;

	strEnumBody += _TAB + "<xs:annotation>" + _CRLF;
	strEnumBody += _TAB + "</xs:annotation>" + _CRLF + _CRLF;

	strEnumBody += _XMLTCT + " CID Defines " + _XMLCMTEND + _CRLF;
	strEnumBody += _TAB + "<xs:simpleType name=\"" + strCIDName + "\">"+ _CRLF;
	strEnumBody += _TAB + _TAB + "<xs:restriction base=\"xs:string\">" + _CRLF;

	var CIDTypeList = (from data in xmlData.Elements()
							where data.Name.LocalName == "CIDXmlTypeData"
							select data).ToList();
	int postfix = 0;

	//for (int i = 0; i < 20000; i += 10)
    //{
	//	foreach (var CIDType in CIDTypeList)
	//	{
	//		xmlAttr = CIDType.Attribute(XmlNS + "id");
	//		if (xmlAttr != null)
	//		{
	//			postfix = (Convert.ToInt32(xmlAttr.Value) + i);
	//			strEnumBody += _TAB + _TAB + _TAB + "<xs:enumeration id=\"" + strCIDName + "_" + String.Format("{0:d18}",postfix) + "\""; xmlAttr = null;
	//		}
	//	
	//		xmlAttr = CIDType.Attribute(XmlNS + "value");
	//		if (xmlAttr != null) { strEnumBody += _BC + "value=\"" + xmlAttr.Value + "_" + String.Format("{0:d18}",postfix) + "\" />" + _CRLF; xmlAttr = null; }
	//	}
    //}

	foreach (var CIDType in CIDTypeList.ToList())
	{
		xmlAttr = CIDType.Attribute(XmlNS + "id");
		if (xmlAttr != null) { strEnumBody += _TAB + _TAB + _TAB + "<xs:enumeration id=\"" + strCIDName + "_" + xmlAttr.Value + "\""; xmlAttr = null; }
	
		xmlAttr = CIDType.Attribute(XmlNS + "value");
		if (xmlAttr != null) { strEnumBody += _BC + "value=\"" + xmlAttr.Value + "\" />" + _CRLF; xmlAttr = null; }
	}

	strEnumBody += _TAB + _TAB + "</xs:restriction>" + _CRLF;
	strEnumBody += _TAB + "</xs:simpleType>" + _CRLF;
	strEnumBody += _CRLF;
	strEnumBody += "</xs:schema>";
	Write(strEnumBody);

#>
